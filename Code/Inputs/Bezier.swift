/**
The native Bezier type in Cotton Duck, used to represent a list of segment that make up a bezier path that can be drawn by a *Renderer*.
*/
public struct Bezier {
	// todo: public generator instead of exposing this internally
	internal var segments = [Segment]()

	public init() {}

	public init(box: Box) {
		move(box[.Left, .Top])
		addLine(box[.Right, .Top])
		addLine(box[.Right, .Bottom])
		addLine(box[.Left, .Bottom])
		close()
	}

	/**
	Given a list of points, create a new bezier with lines drawn between each one of them. Before drawing the first line, we will move to the first point in the list, and then draw a line to the second point in the list, followed by the third point, and so on.

	- Parameter points: A list of *Point*s to draw lines between.
	- Parameter closes: If true, we close the subpath of the bezier immediately after drawing lines between all of our points. If the shape is not closed, the stroke will not be applied to the final line, although it will still show if a fill is applied.
	*/
	public init(points p: [Point], closes: Bool = true) {
		self.init()

		var points = p
		if points.isEmpty {
			return
		}

		move(points.removeFirst())

		points.forEach({
			addLine($0)
		})

		if closes {
			close()
		}
	}

	/**
	- Returns: A new Bezier generated by applying a *Transform* to every segment.
	*/
	public func apply(transform: Transform) -> Bezier {
		var newBezier = Bezier()
		newBezier.segments = segments.map({
			switch $0 {
			case let .Move(to):
				return .Move(to.apply(transform))
			case let .Line(to):
				return .Line(to.apply(transform))
			case let .Arc(center, radius, start, end):
				return .Arc(center.apply(transform), radius, start, end)
			case let .Curve(point, controlPoint1, controlPoint2):
				return .Curve(point.apply(transform), controlPoint1.apply(transform), controlPoint2.apply(transform))
			case let .QuadCurve(point, controlPoint):
				return .QuadCurve(point.apply(transform), controlPoint.apply(transform))
			case .Close:
				return .Close
			}
		})

		return newBezier
	}

	/**
	Move to a new point, without drawing a line from the current point to the new point.
	*/
	public mutating func move(point: Point) {
		segments.append(.Move(point))
	}

	/**
	Draw a line from the current point to a new point.
	*/
	public mutating func addLine(point: Point) {
		segments.append(.Line(point))
	}

	/**
	Draw an arc *radius* units away from the *center*, from *startAngle* to *endAngle*.

	- Parameter center: the coordinate at the center of the arc
	- Parameter radius: how far away from the center coordinate the arc should be drawn
	- Parameter startAngle: the angle of a circle, in radians, to start drawing an arc at.
	- Parameter endAngle: the angle of a circle, in radians, to stop drawing an arc at.
	*/
	public mutating func addArc(center: Point, radius: Double, startAngle: Radian, endAngle: Radian) {
		segments.append(.Arc(center, radius, startAngle, endAngle))
	}

	/**
	Draw a curve around *point* using *controlPoint1* and *controlPoint2* to smoothen the curve out
	*/
	public mutating func addCurve(point: Point, controlPoint1: Point, controlPoint2: Point) {
		segments.append(.Curve(point, controlPoint1, controlPoint2))
	}

	/**
	Draw a quad curve around *point* using *controlPoint1* to smoothen the curve out
	*/
	public mutating func addQuadCurve(point: Point, controlPoint1: Point) {
		segments.append(.QuadCurve(point, controlPoint1))
	}

	/**
	Closes the current bezier. A line will be drawn from the current point to the opening point to accomplish this.
	*/
	public mutating func close() {
		segments.append(.Close)
	}

	/**
	Returns: The most recent *Point* that we have moved or drawn a segment at.
	*/
	public var currentPoint: Point? {
		get {
			for segment in segments.reverse() {
				switch segment {
				case let .Move(to):
					return to
				case let .Line(to):
					return to
				case let .Arc(center, _, _, _):
					return center // return point at the end of the arc?
				case let .Curve(point, _, _):
					return point
				case let .QuadCurve(point, _):
					return point
				case .Close:
					continue
				}
			}

			return nil
		}
	}

	/**
	Returns: *true* if a bezier has no segments, otherwise, *false*.
	*/
	public var isEmpty: Bool {
		get {
			return segments.isEmpty
		}
	}
}

extension Bezier: CustomStringConvertible {
	public var description: String {
		get {
			return segments.reduce("[", combine: { (x, segment) -> String in
				return x + "\n\t\(segment)"
			}) + "\n]"
		}
	}
}

extension Bezier: Hashable {
	public var hashValue: Int {
		get {
			return segments.hashValue
		}
	}
}

public func ==(x: Bezier, y: Bezier) -> Bool {
	return x.segments == y.segments
}

// MARK: -

public enum Segment {
	case Move(Point)
	case Line(Point)
	case Arc(Point, Double, Radian, Radian)
	case Curve(Point, Point, Point)
	case QuadCurve(Point, Point)
	case Close
}

extension Segment: CustomStringConvertible {
	public var description: String {
		get {
			switch self {
			case let .Move(to):
				return "Segment(segment: .Move(\(to)))"
			case let .Line(to):
				return "Segment(segment: .Line(\(to)))"
			case let .Arc(center, radius, start, end):
				return "Segment(segment: .Arc(\(center), \(radius), \(start), \(end)))"
			case let .Curve(point, controlPoint1, controlPoint2):
				return "Segment(segment: .Curve(\(point), \(controlPoint1), \(controlPoint2)))"
			case let .QuadCurve(point, controlPoint):
				return "Segment(segment: .QuadCurve(\(point), \(controlPoint)))"
			case .Close:
				return "Segment(segment: .Close)"
			}
		}
	}
}

extension Segment: Hashable {
	public var hashValue: Int {
		get {
			return description.hashValue
		}
	}
}

public func ==(x: Segment, y: Segment) -> Bool {
	return x.description == y.description
}
